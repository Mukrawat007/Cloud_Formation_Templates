AWSTemplateFormatVersion: "2010-09-09"
Description: A template to launch AutoScaling.

Parameters:
    InstanceType:
        Description: WebServer EC2 instance type
        Type: String
        Default: t2.micro
        AllowedValues:
            - t2.micro
            - t2.small
            - t2.medium
        ConstraintDescription: must be a valid EC2 instance type.
  
    OperatorEMail:
        Description: EMail address to notify if there are any scaling operations
        Type: String
        AllowedPattern: >-
            ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
        ConstraintDescription: must be a valid email address.
  
    MyKey:
        Description: The EC2 Key Pair to allow SSH access to the instances
        Type: 'AWS::EC2::KeyPair::KeyName'
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
    SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 0.0.0.0/0
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


Mappings:
       
    AWSRegionArch2AMI:
        us-east-1:
            HVM64: ami-00068cd7555f543d5
        us-east-2:
            HVM64: ami-0dacb0c129b49f529
            
Resources:
    NotificationTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            Subscription:
                - Endpoint: !Ref OperatorEMail
                  Protocol: email

    WebServerGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
            AvailabilityZones: !GetAZs ''
            LaunchConfigurationName: !Ref LaunchConfig
            MinSize: '3'
            MaxSize: '5'
            LoadBalancerNames:
                - !Ref ElasticLoadBalancer
            NotificationConfiguration:
                TopicARN: !Ref NotificationTopic
                NotificationTypes:
                    - 'autoscaling:EC2_INSTANCE_LAUNCH'
                    - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
                    - 'autoscaling:EC2_INSTANCE_TERMINATE'
                    - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
    
    LaunchConfig: 
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:               
            ImageId: !FindInMap 
                - AWSRegionArch2AMI
                - !Ref 'AWS::Region'
                - HVM64
            KeyName: !Ref MyKey
            SecurityGroups:
                - !Ref InstanceSecurityGroup
            InstanceType: !Ref InstanceType
            UserData:
                Fn::Base64:
                    !Sub |
                        #!/bin/bash
                        sudo yum update -y
                        yum install -y httpd
                        yum install -y git
                        git clone https://github.com/Mukrawat007/static-website-example.git
                        mv static-website-example/* /var/www/html/
                        #echo "<h1><center>This is Apache on auto-scaling</center></h1>" > /var/www/html/index.html
                        systemctl start httpd && systemctl enable httpd
                        
            
    InstanceSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: This is the security group for testing the nested stack.
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '22'
                  ToPort: '22'
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: 0.0.0.0/0

    ElasticLoadBalancer:
        Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
        Properties: 
            AvailabilityZones: !GetAZs ''
            CrossZone: 'true'
            Listeners:
                - LoadBalancerPort: '80'
                  InstancePort: '80'
                  Protocol: HTTP
            HealthCheck:
                Target: 'HTTP:80/'
                HealthyThreshold: '3'
                UnhealthyThreshold: '5'
                Interval: '30'
                Timeout: '5'

    WebServerScaleUpPolicy:
        Type: 'AWS::AutoScaling::ScalingPolicy'
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName: !Ref WebServerGroup
            Cooldown: '60'
            ScalingAdjustment: '1'
    WebServerScaleDownPolicy:
        Type: 'AWS::AutoScaling::ScalingPolicy'
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName: !Ref WebServerGroup
            Cooldown: '60'
            ScalingAdjustment: '-1'
    CPUAlarmHigh:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: Scale-up if CPU > 90% for 5 minutes
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Statistic: Average
            Period: '300'
            EvaluationPeriods: '2'
            Threshold: '90'
            AlarmActions:
                - !Ref WebServerScaleUpPolicy
            Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref WebServerGroup
            ComparisonOperator: GreaterThanOrEqualToThreshold
    CPUAlarmLow:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            AlarmDescription: Scale-down if CPU < 70% for 10 minutes
            MetricName: CPUUtilization
            Namespace: AWS/EC2
            Statistic: Average
            Period: '300'
            EvaluationPeriods: '2'
            Threshold: '70'
            AlarmActions:
                - !Ref WebServerScaleDownPolicy
            Dimensions:
                - Name: AutoScalingGroupName
                  Value:
                    !Ref WebServerGroup
            ComparisonOperator: LessThanOrEqualToThreshold
